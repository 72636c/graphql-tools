(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{154:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return p}));var r=a(2),n=a(6),c=(a(0),a(198)),i={id:"_merge_src_index_.mergeschemasconfig",title:"MergeSchemasConfig",sidebar_label:"MergeSchemasConfig"},s={unversionedId:"api/interfaces/_merge_src_index_.mergeschemasconfig",id:"api/interfaces/_merge_src_index_.mergeschemasconfig",isDocsHomePage:!1,title:"MergeSchemasConfig",description:"Configuration object for schema merging",source:"@site/docs/api/interfaces/_merge_src_index_.mergeschemasconfig.md",permalink:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/api/interfaces/_merge_src_index_.mergeschemasconfig.md",sidebar_label:"MergeSchemasConfig",sidebar:"someSidebar",previous:{title:"MergeResolversOptions",permalink:"/docs/api/interfaces/_merge_src_index_.mergeresolversoptions"},next:{title:"Observable",permalink:"/docs/api/interfaces/_utils_src_index_.observable"}},o=[{value:"Type parameters",id:"type-parameters",children:[]},{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Index",id:"index",children:[{value:"Properties",id:"properties",children:[]}]},{value:"Properties",id:"properties-1",children:[{value:"<code>Optional</code> assumeValid",id:"optional-assumevalid",children:[]},{value:"<code>Optional</code> assumeValidSDL",id:"optional-assumevalidsdl",children:[]},{value:"<code>Optional</code> commentDescriptions",id:"optional-commentdescriptions",children:[]},{value:"<code>Optional</code> convertExtensions",id:"optional-convertextensions",children:[]},{value:"<code>Optional</code> exclusions",id:"optional-exclusions",children:[]},{value:"<code>Optional</code> forceSchemaDefinition",id:"optional-forceschemadefinition",children:[]},{value:"<code>Optional</code> logger",id:"optional-logger",children:[]},{value:"<code>Optional</code> resolverValidationOptions",id:"optional-resolvervalidationoptions",children:[]},{value:"<code>Optional</code> resolvers",id:"optional-resolvers",children:[]},{value:"<code>Optional</code> reverseDirectives",id:"optional-reversedirectives",children:[]},{value:"<code>Optional</code> schemaDirectives",id:"optional-schemadirectives",children:[]},{value:"schemas",id:"schemas",children:[]},{value:"<code>Optional</code> sort",id:"optional-sort",children:[]},{value:"<code>Optional</code> throwOnConflict",id:"optional-throwonconflict",children:[]},{value:"<code>Optional</code> typeDefs",id:"optional-typedefs",children:[]},{value:"<code>Optional</code> useSchemaDefinition",id:"optional-useschemadefinition",children:[]}]}],b={rightToc:o};function p(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Configuration object for schema merging"),Object(c.b)("h2",{id:"type-parameters"},"Type parameters"),Object(c.b)("p",null,"\u25aa ",Object(c.b)("strong",{parentName:"p"},"Resolvers"),": ",Object(c.b)("em",{parentName:"p"},Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"/docs/api/modules/utils#iresolvers"}),"IResolvers"))),Object(c.b)("h2",{id:"hierarchy"},"Hierarchy"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"_merge_src_index_.config"}),"Config"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"BuildSchemaOptions"),Object(c.b)("p",{parentName:"li"},"\u21b3 ",Object(c.b)("strong",{parentName:"p"},"MergeSchemasConfig")))),Object(c.b)("h2",{id:"index"},"Index"),Object(c.b)("h3",{id:"properties"},"Properties"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-assumevalid"}),"assumeValid")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-assumevalidsdl"}),"assumeValidSDL")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-commentdescriptions"}),"commentDescriptions")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-convertextensions"}),"convertExtensions")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-exclusions"}),"exclusions")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-forceschemadefinition"}),"forceSchemaDefinition")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-logger"}),"logger")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-resolvervalidationoptions"}),"resolverValidationOptions")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-resolvers"}),"resolvers")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-reversedirectives"}),"reverseDirectives")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-schemadirectives"}),"schemaDirectives")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#schemas"}),"schemas")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-sort"}),"sort")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-throwonconflict"}),"throwOnConflict")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-typedefs"}),"typeDefs")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-useschemadefinition"}),"useSchemaDefinition"))),Object(c.b)("h2",{id:"properties-1"},"Properties"),Object(c.b)("h3",{id:"optional-assumevalid"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," assumeValid"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"assumeValid"),"? : ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Inherited from ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"_merge_src_index_.mergeschemasconfig"}),"MergeSchemasConfig"),".",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-assumevalid"}),"assumeValid"))),Object(c.b)("p",null,"Defined in node_modules/graphql/type/schema.d.ts:122"),Object(c.b)("p",null,"When building a schema from a GraphQL service's introspection result, it\nmight be safe to assume the schema is valid. Set to true to assume the\nproduced schema is valid."),Object(c.b)("p",null,"Default: false"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-assumevalidsdl"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," assumeValidSDL"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"assumeValidSDL"),"? : ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Inherited from ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"_merge_src_index_.mergeschemasconfig"}),"MergeSchemasConfig"),".",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-assumevalidsdl"}),"assumeValidSDL"))),Object(c.b)("p",null,"Defined in node_modules/graphql/utilities/buildASTSchema.d.ts:22"),Object(c.b)("p",null,"Set to true to assume the SDL is valid."),Object(c.b)("p",null,"Default: false"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-commentdescriptions"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," commentDescriptions"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"commentDescriptions"),"? : ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Inherited from ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"_merge_src_index_.config"}),"Config"),".",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.config#optional-commentdescriptions"}),"commentDescriptions"))),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Overrides void")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L38"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:38"))),Object(c.b)("p",null,"Descriptions are defined as preceding string literals, however an older\nexperimental version of the SDL supported preceding comments as\ndescriptions. Set to true to enable this deprecated behavior.\nThis option is provided to ease adoption and will be removed in v16."),Object(c.b)("p",null,"Default: false"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-convertextensions"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," convertExtensions"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"convertExtensions"),"? : ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Inherited from ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"_merge_src_index_.config"}),"Config"),".",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.config#optional-convertextensions"}),"convertExtensions"))),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L59"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:59"))),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-exclusions"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," exclusions"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"exclusions"),"? : ",Object(c.b)("em",{parentName:"p"},"string[]")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Inherited from ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"_merge_src_index_.config"}),"Config"),".",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.config#optional-exclusions"}),"exclusions"))),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L57"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:57"))),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-forceschemadefinition"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," forceSchemaDefinition"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"forceSchemaDefinition"),"? : ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Inherited from ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"_merge_src_index_.config"}),"Config"),".",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.config#optional-forceschemadefinition"}),"forceSchemaDefinition"))),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L23"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:23"))),Object(c.b)("p",null,"Creates schema definition, even when no types are available\nProduces: ",Object(c.b)("inlineCode",{parentName:"p"},"schema { query: Query }")),Object(c.b)("p",null,"Default: false"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-logger"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," logger"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"logger"),"? : ",Object(c.b)("em",{parentName:"p"},Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"_schema_src_index_.ilogger"}),"ILogger"))),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/merge-schemas.ts#L41"}),"packages/merge/src/merge-schemas.ts:41"))),Object(c.b)("p",null,"Custom logger instance"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-resolvervalidationoptions"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," resolverValidationOptions"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"resolverValidationOptions"),"? : ",Object(c.b)("em",{parentName:"p"},Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"_utils_src_index_.iresolvervalidationoptions"}),"IResolverValidationOptions"))),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/merge-schemas.ts#L37"}),"packages/merge/src/merge-schemas.ts:37"))),Object(c.b)("p",null,"Options to validate the resolvers being merged, if provided"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-resolvers"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," resolvers"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"resolvers"),"? : ",Object(c.b)("em",{parentName:"p"},"Resolvers | Resolvers[]")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/merge-schemas.ts#L29"}),"packages/merge/src/merge-schemas.ts:29"))),Object(c.b)("p",null,"Additional resolvers to also merge"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-reversedirectives"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," reverseDirectives"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"reverseDirectives"),"? : ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Inherited from ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"_merge_src_index_.config"}),"Config"),".",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.config#optional-reversedirectives"}),"reverseDirectives"))),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L56"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:56"))),Object(c.b)("p",null,"Puts the next directive first."),Object(c.b)("p",null,"Default: false"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"example:")),"\nGiven:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"})," type User { a: String @foo }\n type User { a: String @bar }\n")),Object(c.b)("p",null,"Results:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{})," type User { a: @bar @foo }\n")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-schemadirectives"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," schemaDirectives"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"schemaDirectives"),"? : ",Object(c.b)("em",{parentName:"p"},"object")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/merge-schemas.ts#L33"}),"packages/merge/src/merge-schemas.ts:33"))),Object(c.b)("p",null,"Schema directives to apply to the type definitions being merged, if provided"),Object(c.b)("h4",{id:"type-declaration"},"Type declaration:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"["," ",Object(c.b)("strong",{parentName:"li"},"directiveName"),": ",Object(c.b)("em",{parentName:"li"},"string"),"]",": typeof SchemaDirectiveVisitor")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"schemas"},"schemas"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"schemas"),": ",Object(c.b)("em",{parentName:"p"},"GraphQLSchema[]")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/merge-schemas.ts#L21"}),"packages/merge/src/merge-schemas.ts:21"))),Object(c.b)("p",null,"The schemas to be merged"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-sort"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," sort"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"sort"),"? : ",Object(c.b)("em",{parentName:"p"},"boolean | CompareFn\u2039string\u203a")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Inherited from ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"_merge_src_index_.config"}),"Config"),".",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.config#optional-sort"}),"sort"))),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L58"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:58"))),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-throwonconflict"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," throwOnConflict"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"throwOnConflict"),"? : ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Inherited from ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"_merge_src_index_.config"}),"Config"),".",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.config#optional-throwonconflict"}),"throwOnConflict"))),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L29"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:29"))),Object(c.b)("p",null,"Throws an error on a merge conflict"),Object(c.b)("p",null,"Default: false"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-typedefs"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," typeDefs"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"typeDefs"),"? : ",Object(c.b)("em",{parentName:"p"},"string | DocumentNode[] | DocumentNode | string")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/merge-schemas.ts#L25"}),"packages/merge/src/merge-schemas.ts:25"))),Object(c.b)("p",null,"Additional type definitions to also merge"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"optional-useschemadefinition"},Object(c.b)("inlineCode",{parentName:"h3"},"Optional")," useSchemaDefinition"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"useSchemaDefinition"),"? : ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Inherited from ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"_merge_src_index_.config"}),"Config"),".",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.config#optional-useschemadefinition"}),"useSchemaDefinition"))),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L16"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:16"))),Object(c.b)("p",null,"Produces ",Object(c.b)("inlineCode",{parentName:"p"},"schema { query: ..., mutation: ..., subscription: ... }")),Object(c.b)("p",null,"Default: true"))}p.isMDXComponent=!0},198:function(e,t,a){"use strict";a.d(t,"a",(function(){return l})),a.d(t,"b",(function(){return O}));var r=a(0),n=a.n(r);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},c=Object.keys(e);for(r=0;r<c.length;r++)a=c[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)a=c[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var b=n.a.createContext({}),p=function(e){var t=n.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):s({},t,{},e)),a},l=function(e){var t=p(e.components);return n.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=Object(r.forwardRef)((function(e,t){var a=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),l=p(a),d=r,O=l["".concat(i,".").concat(d)]||l[d]||m[d]||c;return a?n.a.createElement(O,s({ref:t},b,{components:a})):n.a.createElement(O,s({ref:t},b))}));function O(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=a.length,i=new Array(c);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var b=2;b<c;b++)i[b]=a[b];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);