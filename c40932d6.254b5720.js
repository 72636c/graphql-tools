(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{162:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return m}));var r=n(2),o=n(9),i=(n(0),n(171)),a={id:"migration-from-merge-graphql-schemas",title:"Migration from Merge GraphQL Schemas",description:"Migration from Merge GraphQL Schemas"},c={id:"migration-from-merge-graphql-schemas",title:"Migration from Merge GraphQL Schemas",description:"Migration from Merge GraphQL Schemas",source:"@site/docs/migration-from-merge-graphql-schemas.md",permalink:"/docs/migration-from-merge-graphql-schemas",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/migration-from-merge-graphql-schemas.md",sidebar:"someSidebar",previous:{title:"Migration from GraphQL Toolkit",permalink:"/docs/migration-from-toolkit"}},p=[{value:"Merging Type Definitions",id:"merging-type-definitions",children:[]}],s={rightToc:p};function m(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Merge GraphQL Schemas was using GraphQL Toolkit's ",Object(i.b)("inlineCode",{parentName:"p"},"@graphql-toolkit/schema-merging")," package under the hood but we decided to deprecate it in favor of new GraphQL Tools's ",Object(i.b)("inlineCode",{parentName:"p"},"@graphql-tools/merge")," package and you need to update your project."),Object(i.b)("h2",{id:"merging-type-definitions"},"Merging Type Definitions"),Object(i.b)("p",null,"Instead of ",Object(i.b)("inlineCode",{parentName:"p"},"mergeTypes"),", you need to use ",Object(i.b)("inlineCode",{parentName:"p"},"mergeTypeDefs")," from ",Object(i.b)("inlineCode",{parentName:"p"},"@graphql-tools/merge")," package. The API is almost same except ",Object(i.b)("inlineCode",{parentName:"p"},"schemaDefinition")," option."),Object(i.b)("p",null,"We were using the following implementation to proxy ",Object(i.b)("inlineCode",{parentName:"p"},"mergeTypes")," to ",Object(i.b)("inlineCode",{parentName:"p"},"mergeTypeDefs")," of GraphQL Toolkit."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { mergeTypeDefs } from '@graphql-toolkit/schema-merging';\n\ntype Config = Parameters<typeof mergeTypeDefs>[1];\n\nexport const mergeTypes = (types: any[], options?: { schemaDefinition?: boolean, all?: boolean } & Partial<Config>) => {\n  const schemaDefinition = options && typeof options.schemaDefinition === 'boolean'\n    ? options.schemaDefinition\n    : true;\n\n  return mergeTypeDefs(types, {\n    useSchemaDefinition: schemaDefinition,\n    forceSchemaDefinition: schemaDefinition,\n    throwOnConflict: true,\n    commentDescriptions: true,\n    reverseDirectives: true,\n    ...options,\n  });\n};\n")),Object(i.b)("p",null,"So if you want to have exact behavior, you can use the options above. Other than that, the API and behavior are almost same."))}m.isMDXComponent=!0},171:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return g}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),m=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},l=function(e){var t=m(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),l=m(n),u=r,g=l["".concat(a,".").concat(u)]||l[u]||f[u]||i;return n?o.a.createElement(g,c({ref:t},s,{components:n})):o.a.createElement(g,c({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);