(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{199:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var h=r.a.createContext({}),l=function(e){var t=r.a.useContext(h),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},p=function(e){var t=l(e.components);return r.a.createElement(h.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=a,u=p["".concat(i,".").concat(d)]||p[d]||m[d]||s;return n?r.a.createElement(u,o({ref:t},h,{components:n})):r.a.createElement(u,o({ref:t},h))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var h=2;h<s;h++)i[h]=n[h];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},59:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(2),r=n(6),s=(n(0),n(199)),i={id:"stitch-schema-extensions",title:"Extending stitched schemas",sidebar_label:"Schema extensions"},o={unversionedId:"stitch-schema-extensions",id:"stitch-schema-extensions",isDocsHomePage:!1,title:"Extending stitched schemas",description:"Schema extensions add gateway-level type definitions and resolvers into a combined API, which is useful for establishing connections between types that exist in separate subschemas.",source:"@site/docs/stitch-schema-extensions.md",slug:"/stitch-schema-extensions",permalink:"/docs/stitch-schema-extensions",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/stitch-schema-extensions.md",version:"current",sidebar_label:"Schema extensions",sidebar:"someSidebar",previous:{title:"Type merging",permalink:"/docs/stitch-type-merging"},next:{title:"Stitching API",permalink:"/docs/stitch-api"}},c=[{value:"Basic example",id:"basic-example",children:[{value:"selectionSet",id:"selectionset",children:[]},{value:"resolve",id:"resolve",children:[]}]},{value:"Batch delegation",id:"batch-delegation",children:[]},{value:"Passing gateway arguments",id:"passing-gateway-arguments",children:[{value:"Via delegation",id:"via-delegation",children:[]},{value:"Via selectionSet",id:"via-selectionset",children:[]}]},{value:"Extending transformed schemas",id:"extending-transformed-schemas",children:[]}],h={rightToc:c};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},h,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Schema extensions add gateway-level type definitions and resolvers into a combined API, which is useful for establishing connections between types that exist in separate subschemas."),Object(s.b)("p",null,"When considering these capabilities, be sure to compare them with the newer automated features available through ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/stitch-type-merging"}),"type merging"),". While type merging frequently eliminates the need for schema extensions, it does not preclude their use."),Object(s.b)("h2",{id:"basic-example"},"Basic example"),Object(s.b)("p",null,"Going back to the chirps and authors service example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { makeExecutableSchema } from '@graphql-tools/schema';\nimport { addMocksToSchema } from '@graphql-tools/mock';\n\nlet chirpSchema = makeExecutableSchema({\n  typeDefs: `\n    type Chirp {\n      id: ID!\n      text: String\n      authorId: ID!\n    }\n\n    type Query {\n      chirpById(id: ID!): Chirp\n      chirpsByAuthorId(authorId: ID!): [Chirp!]!\n    }\n  `\n});\n\nlet authorSchema = makeExecutableSchema({\n  typeDefs: `\n    type User {\n      id: ID!\n      email: String\n    }\n\n    type Query {\n      userById(id: ID!): User\n    }\n  `\n});\n\n// just mock the schemas for now to make them return dummy data\nchirpSchema = addMocksToSchema({ schema: chirpSchema });\nauthorSchema = addMocksToSchema({ schema: authorSchema });\n\n// setup subschema config objects\nexport const chirpSubschema = { schema: chirpSchema };\nexport const authorSubschema = { schema: authorSchema };\n")),Object(s.b)("p",null,"We may want to navigate from a particular user to their chirps, or from a chirp to its author. This is possible within our service architecture by connecting an existing key of each object to a corresponding root query:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"Chirp.authorId -> userById(id)")," gets a Chirp's author."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"User.id -> chirpsByAuthorId(authorId)")," gets a User's chirps.")),Object(s.b)("p",null,"To formalize this navigation within our gateway schema, we can ",Object(s.b)("em",{parentName:"p"},"extend")," each type with a new field that will translate its respective key into an actual object association:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { stitchSchemas } from '@graphql-tools/stitch';\n\nexport const schema = stitchSchemas({\n  subschemas: [\n    chirpSubschema,\n    authorSubschema,\n  ],\n  typeDefs: `\n    extend type Chirp {\n      author: User!\n    }\n    extend type User {\n      chirps: [Chirp!]!\n    }\n  `\n});\n")),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"typeDefs")," option provides type extentions (using the ",Object(s.b)("inlineCode",{parentName:"p"},"extend")," keyword) that add additional fields into the ",Object(s.b)("em",{parentName:"p"},"combined")," gateway schema, and therefore may cross-reference types from any subschema."),Object(s.b)("p",null,"However, these extensions alone won't do anything until they have corresponding resolvers. A complete example would look like this:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { stitchSchemas } from '@graphql-tools/stitch';\nimport { delegateToSchema } from '@graphql-tools/delegate';\n\nexport const schema = stitchSchemas({\n  subschemas: [\n    chirpSubschema,\n    authorSubschema,\n  ],\n  typeDefs: `\n    extend type Chirp {\n      author: User!\n    }\n    extend type User {\n      chirps: [Chirp!]!\n    }\n  `,\n  resolvers: {\n    User: {\n      chirps: {\n        selectionSet: `{ id }`,\n        resolve(user, args, context, info) {\n          return delegateToSchema({\n            schema: chirpSubschema,\n            operation: 'query',\n            fieldName: 'chirpsByAuthorId',\n            args: { authorId: user.id },\n            context,\n            info,\n          });\n        },\n      },\n    },\n    Chirp: {\n      author: {\n        selectionSet: `{ authorId }`,\n        resolve(chirp, args, context, info) {\n          return delegateToSchema({\n            schema: authorSubschema,\n            operation: 'query',\n            fieldName: 'userById',\n            args: { id: chirp.authorId },\n            context,\n            info,\n          });\n        },\n      },\n    },\n  }\n});\n")),Object(s.b)("p",null,"When resolving ",Object(s.b)("inlineCode",{parentName:"p"},"User.chirps")," and ",Object(s.b)("inlineCode",{parentName:"p"},"Chirp.author"),", we ",Object(s.b)("em",{parentName:"p"},"delegate")," each key reference to its corresponding root query. Note that the structure of stitching resolvers has a ",Object(s.b)("inlineCode",{parentName:"p"},"selectionSet")," property and a ",Object(s.b)("inlineCode",{parentName:"p"},"resolve")," method."),Object(s.b)("h3",{id:"selectionset"},"selectionSet"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"Chirp: {\n  author: {\n    selectionSet: `{ authorId }`,\n    // ... resolve\n  },\n},\n")),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"selectionSet")," specifies the key field(s) needed from an object to query for its associations. For example, ",Object(s.b)("inlineCode",{parentName:"p"},"Chirp.author")," will require that a Chirp provide its ",Object(s.b)("inlineCode",{parentName:"p"},"authorId"),". Rather than relying on incoming queries to manually request this key for the association, the selection set will automatically be included in subschema requests to guarentee that these fields are fetched. Dynamic selection sets are also possible by providing a function that recieves a GraphQL ",Object(s.b)("inlineCode",{parentName:"p"},"FieldNode")," (the gateway field) and returns a ",Object(s.b)("inlineCode",{parentName:"p"},"SelectionSetNode"),"."),Object(s.b)("h3",{id:"resolve"},"resolve"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"Chirp: {\n  author: {\n    // ... selectionSet\n    resolve(chirp, args, context, info) {\n      return delegateToSchema({\n        schema: authorSubschema,\n        operation: 'query',\n        fieldName: 'userById',\n        args: { id: chirp.authorId },\n        context,\n        info,\n      });\n    },\n  },\n},\n")),Object(s.b)("p",null,"Resolvers use the ",Object(s.b)("inlineCode",{parentName:"p"},"delegateToSchema")," function to forward parts of queries (or even whole new queries) to any other schema","\u2014","inside ",Object(s.b)("em",{parentName:"p"},"or outside")," of the stitched schema. When delegating to a stitched subschema, always provide the complete ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/stitch-combining-schemas#subschema-configs"}),"subschema config")," object as the ",Object(s.b)("inlineCode",{parentName:"p"},"schema")," option."),Object(s.b)("p",null,"By default, ",Object(s.b)("inlineCode",{parentName:"p"},"delegateToSchema")," assumes that the delegated operation will return the same GraphQL type as the resolved field (ex: a ",Object(s.b)("inlineCode",{parentName:"p"},"User")," field would delegate to a ",Object(s.b)("inlineCode",{parentName:"p"},"User")," query). If this is not the case, then you should manually provide a ",Object(s.b)("inlineCode",{parentName:"p"},"returnType")," option citing the expected GraphQL return type, and transform the result accordingly in the resolver."),Object(s.b)("h2",{id:"batch-delegation"},"Batch delegation"),Object(s.b)("p",null,"The drawback of performing individual ",Object(s.b)("inlineCode",{parentName:"p"},"delegateToSchema")," calls is that they can be fairly inefficient. Say we request ",Object(s.b)("inlineCode",{parentName:"p"},"Chirp.author")," from an array of ten chirps","\u2014","that would delegate ten individual ",Object(s.b)("inlineCode",{parentName:"p"},"userById")," queries while resolving each author! To improve this, we can instead delegate in ",Object(s.b)("em",{parentName:"p"},"batches"),", where many instances of a field resolver are consolidated into one delegation."),Object(s.b)("p",null,"To setup batching, the first thing we'll need is a new query in the authors service that allows fetching many users at once:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"usersByIds(ids: [ID!]!): [User]!\n")),Object(s.b)("p",null,"With this many-users query available, we can now delegate the ",Object(s.b)("inlineCode",{parentName:"p"},"Chirp.author")," field in batches across many records:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { batchDelegateToSchema } from '@graphql-tools/batch-delegate';\n\nconst schema = stitchSchemas({\n  subschemas: [\n    chirpSubschema,\n    authorSubschema,\n  ],\n  typeDefs: `\n    extend type Chirp {\n      author: User!\n    }\n  `,\n  resolvers: {\n    Chirp: {\n      author: {\n        selectionSet: `{ authorId }`,\n        resolve(chirp, _args, context, info) {\n          return batchDelegateToSchema({\n            schema: authorSubschema,\n            operation: 'query',\n            fieldName: 'usersByIds',\n            key: chirp.authorId,\n            argsFromKeys: (ids) => ({ ids }),\n            context,\n            info,\n          });\n        },\n      },\n    },\n  },\n});\n")),Object(s.b)("p",null,"Internally, ",Object(s.b)("inlineCode",{parentName:"p"},"batchDelegateToSchema")," wraps a single ",Object(s.b)("inlineCode",{parentName:"p"},"delegateToSchema")," call in a ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/dataloader"}),"DataLoader")," scoped by context, field, arguments, and query selection. It assumes that the delegated operation will return an array of objects matching the gateway field's named GraphQL type (ex: a ",Object(s.b)("inlineCode",{parentName:"p"},"User")," field delegates to a ",Object(s.b)("inlineCode",{parentName:"p"},"[User]")," query). If this is not the case, then you should manually provide a ",Object(s.b)("inlineCode",{parentName:"p"},"returnType")," option citing the expected GraphQL return type."),Object(s.b)("p",null,"Batch delegation is generally preferable over plain delegation because it eliminates the redundancy of requesting the same field across an array of parent objects. Even so, delegation costs can add up because there is still one subschema request made ",Object(s.b)("em",{parentName:"p"},"per batched field"),"\u2014","for remote services, this may create many network requests sent to the same service. Consider enabling an additional layer of network-level batching with a package such as ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.apollographql.com/docs/link/links/batch-http/"}),"apollo-link-batch-http")," to consolidate requests per subschema."),Object(s.b)("h2",{id:"passing-gateway-arguments"},"Passing gateway arguments"),Object(s.b)("p",null,"Exhaustive accessors like ",Object(s.b)("inlineCode",{parentName:"p"},"User.chirps")," do not scale well (...what happens when a user has tens of thousands of chirps?), so the gateway should probably accept scoping arguments and pass them through to the underlying subschemas. Let's add a ",Object(s.b)("inlineCode",{parentName:"p"},"pageNumber")," argument to the ",Object(s.b)("inlineCode",{parentName:"p"},"User.chirps")," schema extension:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"extend type User {\n  chirps(pageNumber: Int=1): [Chirp]!\n}\n")),Object(s.b)("p",null,"This argument only exists in the gateway schema and won't do anything until passed through to subschemas. How we pass this input through depends on which subservice owns the association data..."),Object(s.b)("h3",{id:"via-delegation"},"Via delegation"),Object(s.b)("p",null,"First, let's say that the Chirps service defines this association. The first thing we'll need is a corresponding argument in the chirps query; and while we're at it, let's also support batching:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"chirpPagesByAuthorIds(authorIds: [ID!]!, pageNumber: Int=1): [[Chirp!]!]!\n")),Object(s.b)("p",null,"This ",Object(s.b)("inlineCode",{parentName:"p"},"chirpPagesByAuthorIds")," query is a very primitive example of pagination, and simply returns an array of chirps for each author ID. Now we just need to pass the resolver's page number argument through to ",Object(s.b)("inlineCode",{parentName:"p"},"batchDelegateToSchema"),", and manually specify a ",Object(s.b)("inlineCode",{parentName:"p"},"returnType")," that matches the pagination format:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"User: {\n  chirps: {\n    selectionSet: `{ id }`,\n    resolve(user, args, context, info) {\n      return batchDelegateToSchema({\n        schema: chirpsSubschema,\n        operation: 'query',\n        fieldName: 'chirpPagesByAuthorIds',\n        key: user.id,\n        argsFromKeys: (authorIds) => ({ authorIds, pageNumber: args.pageNumber }),\n        returnType: new GraphQLList(new GraphQLList(chirpsSubschema.schema.getType('Chirp'))),\n        context,\n        info,\n      });\n    },\n  },\n}\n")),Object(s.b)("h3",{id:"via-selectionset"},"Via selectionSet"),Object(s.b)("p",null,"Alternatively, let's say that users and chirps have a many-to-many relationship and the users service owns the association data. That might give us a ",Object(s.b)("inlineCode",{parentName:"p"},"User.chirpIds")," field to stitch from:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"User.chirpIds(pageNumber: Int=1): [ID]!\n")),Object(s.b)("p",null,"In this configuration, resolver arguments will need to pass through with the initial ",Object(s.b)("inlineCode",{parentName:"p"},"selectionSet"),". The ",Object(s.b)("inlineCode",{parentName:"p"},"forwardArgsToSelectionSet")," helper handles this:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { forwardArgsToSelectionSet } from '@graphql-tools/stitch';\n//...\nUser: {\n  chirps: {\n    selectionSet: forwardArgsToSelectionSet('{ chirpIds }'),\n    resolve(user, args, context, info) {\n      return batchDelegateToSchema({\n        schema: chirpsSubschema,\n        operation: 'query',\n        fieldName: 'chirpsByIds',\n        key: user.chirpIds,\n        argsFromKeys: (ids) => ({ ids }),\n        context,\n        info,\n      });\n    },\n  },\n}\n")),Object(s.b)("p",null,"By default, ",Object(s.b)("inlineCode",{parentName:"p"},"forwardArgsToSelectionSet")," will pass through all arguments from the gateway field to ",Object(s.b)("em",{parentName:"p"},"all")," root fields in the selection set. For complex selections that request multiple fields, you may provide an additional mapping of selection names with their respective arguments:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"forwardArgsToSelectionSet('{ id chirpIds }', { chirpIds: ['pageNumber'] })\n")),Object(s.b)("h2",{id:"extending-transformed-schemas"},"Extending transformed schemas"),Object(s.b)("p",null,Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/stitch-combining-schemas#adding-transforms"}),"Transformed schemas")," are nuanced because they involve two versions of the same schema: the original schema, and the transformed gateway schema. When extending a transformed schema, we extend the gateway schema but delegate to the original schema. For example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { makeExecutableSchema } from '@graphql-tools/schema';\nimport { addMocksToSchema } from '@graphql-tools/mock';\nimport { stitchSchemas } from '@graphql-tools/stitch';\nimport { delegateToSchema } from '@graphql-tools/delegate';\nimport { FilterRootFields, RenameTypes } from '@graphql-tools/wrap';\n\nconst chirpSchema = makeExecutableSchema({\n  typeDefs: `\n    type Chirp {\n      id: ID!\n      text: String\n      authorId: ID!\n    }\n    type Query {\n      chirpById(id: ID!): Chirp\n      chirpsByAuthorId(authorId: ID!): [Chirp]!\n    }\n  `\n});\n\nconst chirpSubschema = {\n  schema: addMocksToSchema({ schema: chirpSchema }),\n  transforms: [\n    // remove the \"chirpsByAuthorId\" root field\n    new FilterRootFields((op, field) => field !== 'chirpsByAuthorId'),\n    // prefix all type names with \"Chirp_\"\n    new RenameTypes((name) => `Chirp_${name}`),\n  ],\n};\n\nconst authorSchema = makeExecutableSchema({\n  typeDefs: `\n    type User {\n      id: ID!\n      email: String\n    }\n\n    type Query {\n      userById(id: ID!): User\n    }\n  `\n});\n\nconst authorSubschema = {\n  schema: addMocksToSchema({ schema: authorSchema })\n};\n\nconst stitchedSchema = stitchSchemas({\n  subschemas: [\n    chirpSubschema,\n    authorSubschema,\n  ],\n  typeDefs: `\n    extend type User {\n      chirps: [Chirp_Chirp!]!\n    }\n    extend type Chirp_Chirp {\n      author: User!\n    }\n  `,\n  resolvers: {\n    User: {\n      chirps: {\n        selectionSet: `{ id }`,\n        resolve(user, args, context, info) {\n          return delegateToSchema({\n            schema: chirpSubschema,\n            operation: 'query',\n            fieldName: 'chirpsByAuthorId',\n            args: { authorId: user.id },\n            context,\n            info,\n          });\n        },\n      },\n    },\n    Chirp_Chirp: {\n      author: {\n        selectionSet: `{ authorId }`,\n        resolve(chirp, args, context, info) {\n          return delegateToSchema({\n            schema: authorSubschema,\n            operation: 'query',\n            fieldName: 'userById',\n            args: { id: chirp.authorId },\n            context,\n            info,\n          });\n        },\n      },\n    },\n  },\n});\n")),Object(s.b)("p",null,"A few key points to note here:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"All schema extensions and their resolvers exist in the gateway schema, and therefore refer to the transformed type name ",Object(s.b)("inlineCode",{parentName:"p"},"Chirp_Chirp"),".")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"Delegations refer to the original subschema, and therefore may reference fields such as ",Object(s.b)("inlineCode",{parentName:"p"},"chirpsByAuthorId")," that have been removed from the gateway schema."))))}l.isMDXComponent=!0}}]);