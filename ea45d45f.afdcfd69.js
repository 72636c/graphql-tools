(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{194:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return n})),t.d(r,"metadata",(function(){return l})),t.d(r,"rightToc",(function(){return s})),t.d(r,"default",(function(){return p}));var a=t(3),i=t(7),o=(t(0),t(207)),n={id:"_utils_src_index_.iresolvervalidationoptions",title:"IResolverValidationOptions",sidebar_label:"IResolverValidationOptions"},l={unversionedId:"api/interfaces/_utils_src_index_.iresolvervalidationoptions",id:"api/interfaces/_utils_src_index_.iresolvervalidationoptions",isDocsHomePage:!1,title:"IResolverValidationOptions",description:"Options for validating resolvers",source:"@site/docs/api/interfaces/_utils_src_index_.iresolvervalidationoptions.md",slug:"/api/interfaces/_utils_src_index_.iresolvervalidationoptions",permalink:"/docs/api/interfaces/_utils_src_index_.iresolvervalidationoptions",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/api/interfaces/_utils_src_index_.iresolvervalidationoptions.md",version:"current",sidebar_label:"IResolverValidationOptions",sidebar:"someSidebar",previous:{title:"IMockServer",permalink:"/docs/api/interfaces/_mock_src_index_.imockserver"},next:{title:"JsonFileLoaderOptions",permalink:"/docs/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions"}},s=[{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Index",id:"index",children:[{value:"Properties",id:"properties",children:[]}]},{value:"Properties",id:"properties-1",children:[{value:"<code>Optional</code> requireResolversForAllFields",id:"optional-requireresolversforallfields",children:[]},{value:"<code>Optional</code> requireResolversForArgs",id:"optional-requireresolversforargs",children:[]},{value:"<code>Optional</code> requireResolversForNonScalar",id:"optional-requireresolversfornonscalar",children:[]},{value:"<code>Optional</code> requireResolversForResolveType",id:"optional-requireresolversforresolvetype",children:[]},{value:"<code>Optional</code> requireResolversToMatchSchema",id:"optional-requireresolverstomatchschema",children:[]}]}],c={rightToc:s};function p(e){var r=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:r,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Options for validating resolvers"),Object(o.b)("h2",{id:"hierarchy"},"Hierarchy"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"IResolverValidationOptions"))),Object(o.b)("h2",{id:"index"},"Index"),Object(o.b)("h3",{id:"properties"},"Properties"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/_utils_src_index_.iresolvervalidationoptions#optional-requireresolversforallfields"}),"requireResolversForAllFields")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/_utils_src_index_.iresolvervalidationoptions#optional-requireresolversforargs"}),"requireResolversForArgs")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/_utils_src_index_.iresolvervalidationoptions#optional-requireresolversfornonscalar"}),"requireResolversForNonScalar")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/_utils_src_index_.iresolvervalidationoptions#optional-requireresolversforresolvetype"}),"requireResolversForResolveType")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/_utils_src_index_.iresolvervalidationoptions#optional-requireresolverstomatchschema"}),"requireResolversToMatchSchema"))),Object(o.b)("h2",{id:"properties-1"},"Properties"),Object(o.b)("h3",{id:"optional-requireresolversforallfields"},Object(o.b)("inlineCode",{parentName:"h3"},"Optional")," requireResolversForAllFields"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("strong",{parentName:"p"},"requireResolversForAllFields"),"? : ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"/docs/api/modules/utils#validatorbehavior"}),"ValidatorBehavior"))),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Defined in ",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/utils/src/Interfaces.ts#L105"}),"packages/utils/src/Interfaces.ts:105"))),Object(o.b)("p",null,"Enable to require a resolver for be defined for all fields defined\nin the schema. Defaults to ",Object(o.b)("inlineCode",{parentName:"p"},"ignore"),"."),Object(o.b)("hr",null),Object(o.b)("h3",{id:"optional-requireresolversforargs"},Object(o.b)("inlineCode",{parentName:"h3"},"Optional")," requireResolversForArgs"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("strong",{parentName:"p"},"requireResolversForArgs"),"? : ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"/docs/api/modules/utils#validatorbehavior"}),"ValidatorBehavior"))),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Defined in ",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/utils/src/Interfaces.ts#L95"}),"packages/utils/src/Interfaces.ts:95"))),Object(o.b)("p",null,"Enable to require a resolver to be defined for any field that has\narguments. Defaults to ",Object(o.b)("inlineCode",{parentName:"p"},"ignore"),"."),Object(o.b)("hr",null),Object(o.b)("h3",{id:"optional-requireresolversfornonscalar"},Object(o.b)("inlineCode",{parentName:"h3"},"Optional")," requireResolversForNonScalar"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("strong",{parentName:"p"},"requireResolversForNonScalar"),"? : ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"/docs/api/modules/utils#validatorbehavior"}),"ValidatorBehavior"))),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Defined in ",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/utils/src/Interfaces.ts#L100"}),"packages/utils/src/Interfaces.ts:100"))),Object(o.b)("p",null,"Enable to require a resolver to be defined for any field which has\na return type that isn't a scalar. Defaults to ",Object(o.b)("inlineCode",{parentName:"p"},"ignore"),"."),Object(o.b)("hr",null),Object(o.b)("h3",{id:"optional-requireresolversforresolvetype"},Object(o.b)("inlineCode",{parentName:"h3"},"Optional")," requireResolversForResolveType"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("strong",{parentName:"p"},"requireResolversForResolveType"),"? : ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"/docs/api/modules/utils#validatorbehavior"}),"ValidatorBehavior"))),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Defined in ",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/utils/src/Interfaces.ts#L110"}),"packages/utils/src/Interfaces.ts:110"))),Object(o.b)("p",null,"Enable to require a ",Object(o.b)("inlineCode",{parentName:"p"},"resolveType()")," for Interface and Union types.\nDefaults to ",Object(o.b)("inlineCode",{parentName:"p"},"ignore"),"."),Object(o.b)("hr",null),Object(o.b)("h3",{id:"optional-requireresolverstomatchschema"},Object(o.b)("inlineCode",{parentName:"h3"},"Optional")," requireResolversToMatchSchema"),Object(o.b)("p",null,"\u2022 ",Object(o.b)("strong",{parentName:"p"},"requireResolversToMatchSchema"),"? : ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"/docs/api/modules/utils#validatorbehavior"}),"ValidatorBehavior"))),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Defined in ",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/utils/src/Interfaces.ts#L115"}),"packages/utils/src/Interfaces.ts:115"))),Object(o.b)("p",null,"Enable to require all defined resolvers to match fields that\nactually exist in the schema. Defaults to ",Object(o.b)("inlineCode",{parentName:"p"},"error")," to catch common errors."))}p.isMDXComponent=!0},207:function(e,r,t){"use strict";t.d(r,"a",(function(){return b})),t.d(r,"b",(function(){return m}));var a=t(0),i=t.n(a);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,i=function(e,r){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),p=function(e){var r=i.a.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},b=function(e){var r=p(e.components);return i.a.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return i.a.createElement(i.a.Fragment,{},r)}},d=i.a.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,n=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(t),d=a,m=b["".concat(n,".").concat(d)]||b[d]||u[d]||o;return t?i.a.createElement(m,l(l({ref:r},c),{},{components:t})):i.a.createElement(m,l({ref:r},c))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,n=new Array(o);n[0]=d;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,n[1]=l;for(var c=2;c<o;c++)n[c]=t[c];return i.a.createElement.apply(null,n)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);