(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{243:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return p})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return s}));var n=r(2),o=r(9),a=(r(0),r(271)),i={id:"migration-from-merge-graphql-schemas",title:"Migration from Merge GraphQL Schemas",sidebar_label:"From Merge GraphQL Schemas",description:"Migration from Merge GraphQL Schemas"},p={id:"migration-from-merge-graphql-schemas",isDocsHomePage:!1,title:"Migration from Merge GraphQL Schemas",description:"Migration from Merge GraphQL Schemas",source:"@site/docs/migration-from-merge-graphql-schemas.md",permalink:"/docs/migration-from-merge-graphql-schemas",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/migration-from-merge-graphql-schemas.md",sidebar_label:"From Merge GraphQL Schemas",sidebar:"someSidebar",previous:{title:"Migration from GraphQL Toolkit",permalink:"/docs/migration-from-toolkit"},next:{title:"Migration from GraphQL Import",permalink:"/docs/migration-from-import"}},c=[{value:"Merging Type Definitions",id:"merging-type-definitions",children:[]}],m={rightToc:c};function s(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},m,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Merge GraphQL Schemas was using GraphQL Toolkit's ",Object(a.b)("inlineCode",{parentName:"p"},"@graphql-toolkit/schema-merging")," package under the hood but we decided to deprecate it in favor of new GraphQL Tools's ",Object(a.b)("inlineCode",{parentName:"p"},"@graphql-tools/merge")," package and you need to update your project."),Object(a.b)("h2",{id:"merging-type-definitions"},"Merging Type Definitions"),Object(a.b)("p",null,"Instead of ",Object(a.b)("inlineCode",{parentName:"p"},"mergeTypes"),", you need to use ",Object(a.b)("inlineCode",{parentName:"p"},"mergeTypeDefs")," from ",Object(a.b)("inlineCode",{parentName:"p"},"@graphql-tools/merge")," package. The API is almost same except ",Object(a.b)("inlineCode",{parentName:"p"},"schemaDefinition")," option."),Object(a.b)("p",null,"We were using the following implementation to proxy ",Object(a.b)("inlineCode",{parentName:"p"},"mergeTypes")," to ",Object(a.b)("inlineCode",{parentName:"p"},"mergeTypeDefs")," of GraphQL Toolkit."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { mergeTypeDefs } from '@graphql-toolkit/schema-merging';\n\ntype Config = Parameters<typeof mergeTypeDefs>[1];\n\nexport const mergeTypes = (types: any[], options?: { schemaDefinition?: boolean, all?: boolean } & Partial<Config>) => {\n  const schemaDefinition = options && typeof options.schemaDefinition === 'boolean'\n    ? options.schemaDefinition\n    : true;\n\n  return mergeTypeDefs(types, {\n    useSchemaDefinition: schemaDefinition,\n    forceSchemaDefinition: schemaDefinition,\n    throwOnConflict: true,\n    commentDescriptions: true,\n    reverseDirectives: true,\n    ...options,\n  });\n};\n")),Object(a.b)("p",null,"So if you want to have exact behavior, you can use the options above. Other than that, the API and behavior are almost same."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { mergeTypes, mergeResolvers, fileLoader } from 'merge-graphql-schemas';\n")),Object(a.b)("p",null,"should become"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { mergeTypeDefs, mergeResolvers } from '@graphql-tools/merge';\nimport { loadFilesSync } from '@graphql-tools/load-files';\n")),Object(a.b)("p",null,"So you can replace ",Object(a.b)("inlineCode",{parentName:"p"},"mergeTypes")," with ",Object(a.b)("inlineCode",{parentName:"p"},"mergeTypeDefs")," and ",Object(a.b)("inlineCode",{parentName:"p"},"fileLoader")," with ",Object(a.b)("inlineCode",{parentName:"p"},"loadFilesSync"),"."))}s.isMDXComponent=!0},271:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return b}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var m=o.a.createContext({}),s=function(e){var t=o.a.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):p({},t,{},e)),r},l=function(e){var t=s(e.components);return o.a.createElement(m.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},f=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),l=s(r),f=n,b=l["".concat(i,".").concat(f)]||l[f]||g[f]||a;return r?o.a.createElement(b,p({ref:t},m,{components:r})):o.a.createElement(b,p({ref:t},m))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=f;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var m=2;m<a;m++)i[m]=r[m];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"}}]);