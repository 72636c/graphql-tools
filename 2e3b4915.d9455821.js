(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{208:function(e,a,t){"use strict";t.d(a,"a",(function(){return b})),t.d(a,"b",(function(){return f}));var n=t(0),r=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),p=function(e){var a=r.a.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},b=function(e){var a=p(e.components);return r.a.createElement(c.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},m=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(t),m=n,f=b["".concat(l,".").concat(m)]||b[m]||d[m]||i;return t?r.a.createElement(f,o(o({ref:a},c),{},{components:t})):r.a.createElement(f,o({ref:a},c))}));function f(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},91:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return l})),t.d(a,"metadata",(function(){return o})),t.d(a,"rightToc",(function(){return s})),t.d(a,"default",(function(){return p}));var n=t(3),r=t(7),i=(t(0),t(208)),l={id:"_loaders_json_file_src_index_.jsonfileloaderoptions",title:"JsonFileLoaderOptions",sidebar_label:"JsonFileLoaderOptions"},o={unversionedId:"api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions",id:"api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions",isDocsHomePage:!1,title:"JsonFileLoaderOptions",description:"Additional options for loading from a JSON file",source:"@site/docs/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions.md",slug:"/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions",permalink:"/docs/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions.md",version:"current",sidebar_label:"JsonFileLoaderOptions",sidebar:"someSidebar",previous:{title:"IResolverValidationOptions",permalink:"/docs/api/interfaces/_utils_src_index_.iresolvervalidationoptions"},next:{title:"LoadDocumentError",permalink:"/docs/api/interfaces/_utils_src_index_.loaddocumenterror"}},s=[{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Index",id:"index",children:[{value:"Properties",id:"properties",children:[]}]},{value:"Properties",id:"properties-1",children:[{value:"<code>Optional</code> allowLegacySDLEmptyFields",id:"optional-allowlegacysdlemptyfields",children:[]},{value:"<code>Optional</code> allowLegacySDLImplementsInterfaces",id:"optional-allowlegacysdlimplementsinterfaces",children:[]},{value:"<code>Optional</code> assumeValid",id:"optional-assumevalid",children:[]},{value:"<code>Optional</code> assumeValidSDL",id:"optional-assumevalidsdl",children:[]},{value:"<code>Optional</code> commentDescriptions",id:"optional-commentdescriptions",children:[]},{value:"<code>Optional</code> cwd",id:"optional-cwd",children:[]},{value:"<code>Optional</code> experimentalFragmentVariables",id:"optional-experimentalfragmentvariables",children:[]},{value:"<code>Optional</code> noLocation",id:"optional-nolocation",children:[]}]}],c={rightToc:s};function p(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Additional options for loading from a JSON file"),Object(i.b)("h2",{id:"hierarchy"},"Hierarchy"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"_utils_src_index_.extendedparseoptions"}),"ExtendedParseOptions")," & GraphQLSchemaValidationOptions & BuildSchemaOptions & object"),Object(i.b)("p",{parentName:"li"},"\u21b3 ",Object(i.b)("strong",{parentName:"p"},"JsonFileLoaderOptions")))),Object(i.b)("h2",{id:"index"},"Index"),Object(i.b)("h3",{id:"properties"},"Properties"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions#optional-allowlegacysdlemptyfields"}),"allowLegacySDLEmptyFields")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions#optional-allowlegacysdlimplementsinterfaces"}),"allowLegacySDLImplementsInterfaces")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions#optional-assumevalid"}),"assumeValid")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions#optional-assumevalidsdl"}),"assumeValidSDL")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions#optional-commentdescriptions"}),"commentDescriptions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions#optional-cwd"}),"cwd")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions#optional-experimentalfragmentvariables"}),"experimentalFragmentVariables")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/interfaces/_loaders_json_file_src_index_.jsonfileloaderoptions#optional-nolocation"}),"noLocation"))),Object(i.b)("h2",{id:"properties-1"},"Properties"),Object(i.b)("h3",{id:"optional-allowlegacysdlemptyfields"},Object(i.b)("inlineCode",{parentName:"h3"},"Optional")," allowLegacySDLEmptyFields"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"allowLegacySDLEmptyFields"),"? : ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Inherited from ",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"_loaders_graphql_file_src_index_.graphqlfileloaderoptions"}),"GraphQLFileLoaderOptions"),".",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"/docs/api/interfaces/_loaders_graphql_file_src_index_.graphqlfileloaderoptions#optional-allowlegacysdlemptyfields"}),"allowLegacySDLEmptyFields"))),Object(i.b)("p",null,"Defined in node_modules/graphql/language/parser.d.ts:23"),Object(i.b)("p",null,"If enabled, the parser will parse empty fields sets in the Schema\nDefinition Language. Otherwise, the parser will follow the current\nspecification."),Object(i.b)("p",null,"This option is provided to ease adoption of the final SDL specification\nand will be removed in v16."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"optional-allowlegacysdlimplementsinterfaces"},Object(i.b)("inlineCode",{parentName:"h3"},"Optional")," allowLegacySDLImplementsInterfaces"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"allowLegacySDLImplementsInterfaces"),"? : ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Inherited from ",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"_loaders_graphql_file_src_index_.graphqlfileloaderoptions"}),"GraphQLFileLoaderOptions"),".",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"/docs/api/interfaces/_loaders_graphql_file_src_index_.graphqlfileloaderoptions#optional-allowlegacysdlimplementsinterfaces"}),"allowLegacySDLImplementsInterfaces"))),Object(i.b)("p",null,"Defined in node_modules/graphql/language/parser.d.ts:33"),Object(i.b)("p",null,"If enabled, the parser will parse implemented interfaces with no ",Object(i.b)("inlineCode",{parentName:"p"},"&"),"\ncharacter between each interface. Otherwise, the parser will follow the\ncurrent specification."),Object(i.b)("p",null,"This option is provided to ease adoption of the final SDL specification\nand will be removed in v16."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"optional-assumevalid"},Object(i.b)("inlineCode",{parentName:"h3"},"Optional")," assumeValid"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"assumeValid"),"? : ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Inherited from ",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"_merge_src_index_.mergeschemasconfig"}),"MergeSchemasConfig"),".",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-assumevalid"}),"assumeValid"))),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Overrides ",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"_merge_src_index_.mergeschemasconfig"}),"MergeSchemasConfig"),".",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-assumevalid"}),"assumeValid"))),Object(i.b)("p",null,"Defined in node_modules/graphql/type/schema.d.ts:122"),Object(i.b)("p",null,"When building a schema from a GraphQL service's introspection result, it\nmight be safe to assume the schema is valid. Set to true to assume the\nproduced schema is valid."),Object(i.b)("p",null,"Default: false"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"optional-assumevalidsdl"},Object(i.b)("inlineCode",{parentName:"h3"},"Optional")," assumeValidSDL"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"assumeValidSDL"),"? : ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Inherited from ",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"_merge_src_index_.mergeschemasconfig"}),"MergeSchemasConfig"),".",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"/docs/api/interfaces/_merge_src_index_.mergeschemasconfig#optional-assumevalidsdl"}),"assumeValidSDL"))),Object(i.b)("p",null,"Defined in node_modules/graphql/utilities/buildASTSchema.d.ts:22"),Object(i.b)("p",null,"Set to true to assume the SDL is valid."),Object(i.b)("p",null,"Default: false"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"optional-commentdescriptions"},Object(i.b)("inlineCode",{parentName:"h3"},"Optional")," commentDescriptions"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"commentDescriptions"),"? : ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Inherited from ",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"_loaders_graphql_file_src_index_.graphqlfileloaderoptions"}),"GraphQLFileLoaderOptions"),".",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"/docs/api/interfaces/_loaders_graphql_file_src_index_.graphqlfileloaderoptions#optional-commentdescriptions"}),"commentDescriptions"))),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Overrides void")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Defined in ",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/utils/src/parse-graphql-sdl.ts#L22"}),"packages/utils/src/parse-graphql-sdl.ts:22"))),Object(i.b)("p",null,"Set to ",Object(i.b)("inlineCode",{parentName:"p"},"true"),' in order to convert all GraphQL comments (marked with # sign) to descriptions (""")\nGraphQL has built-in support for transforming descriptions to comments (with ',Object(i.b)("inlineCode",{parentName:"p"},"print"),"), but not while\nparsing. Turning the flag on will support the other way as well (",Object(i.b)("inlineCode",{parentName:"p"},"parse"),")"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"optional-cwd"},Object(i.b)("inlineCode",{parentName:"h3"},"Optional")," cwd"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"cwd"),"? : ",Object(i.b)("em",{parentName:"p"},"string")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Inherited from __type.cwd")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Defined in ",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/utils/src/loaders.ts#L15"}),"packages/utils/src/loaders.ts:15"))),Object(i.b)("hr",null),Object(i.b)("h3",{id:"optional-experimentalfragmentvariables"},Object(i.b)("inlineCode",{parentName:"h3"},"Optional")," experimentalFragmentVariables"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"experimentalFragmentVariables"),"? : ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Inherited from ",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"_loaders_graphql_file_src_index_.graphqlfileloaderoptions"}),"GraphQLFileLoaderOptions"),".",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"/docs/api/interfaces/_loaders_graphql_file_src_index_.graphqlfileloaderoptions#optional-experimentalfragmentvariables"}),"experimentalFragmentVariables"))),Object(i.b)("p",null,"Defined in node_modules/graphql/language/parser.d.ts:51"),Object(i.b)("p",null,"EXPERIMENTAL:"),Object(i.b)("p",null,"If enabled, the parser will understand and parse variable definitions\ncontained in a fragment definition. They'll be represented in the\n",Object(i.b)("inlineCode",{parentName:"p"},"variableDefinitions")," field of the FragmentDefinitionNode."),Object(i.b)("p",null,"The syntax is identical to normal, query-defined variables. For example:"),Object(i.b)("p",null,"  fragment A($var: Boolean = false) on T  {\n...\n}"),Object(i.b)("p",null,"Note: this feature is experimental and may change or be removed in the\nfuture."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"optional-nolocation"},Object(i.b)("inlineCode",{parentName:"h3"},"Optional")," noLocation"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("strong",{parentName:"p"},"noLocation"),"? : ",Object(i.b)("em",{parentName:"p"},"boolean")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Inherited from ",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"_loaders_graphql_file_src_index_.graphqlfileloaderoptions"}),"GraphQLFileLoaderOptions"),".",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"/docs/api/interfaces/_loaders_graphql_file_src_index_.graphqlfileloaderoptions#optional-nolocation"}),"noLocation"))),Object(i.b)("p",null,"Defined in node_modules/graphql/language/parser.d.ts:13"),Object(i.b)("p",null,"By default, the parser creates AST nodes that know the location\nin the source that they correspond to. This configuration flag\ndisables that behavior for performance or testing."))}p.isMDXComponent=!0}}]);