(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{116:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return i})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),c=(a(0),a(258)),b={id:"mock",title:"@graphql-tools/mock",sidebar_label:"mock"},o={unversionedId:"api/modules/mock",id:"api/modules/mock",isDocsHomePage:!1,title:"@graphql-tools/mock",description:"- MockList",source:"@site/docs/api/modules/mock_src.md",slug:"/api/modules/mock",permalink:"/docs/api/modules/mock",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/api/modules/mock_src.md",version:"current",sidebar_label:"mock",sidebar:"someSidebar",previous:{title:"@graphql-tools/merge",permalink:"/docs/api/modules/merge"},next:{title:"@graphql-tools/node-require",permalink:"/docs/api/modules/node-require"}},i=[{value:"Interfaces",id:"interfaces",children:[]},{value:"Type aliases",id:"type-aliases",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Type aliases",id:"type-aliases-1",children:[{value:"IMockFn",id:"imockfn",children:[]},{value:"IMockTypeFn",id:"imocktypefn",children:[]}]},{value:"Functions",id:"functions-1",children:[{value:"addMocksToSchema",id:"addmockstoschema",children:[]},{value:"isMockList",id:"ismocklist",children:[]},{value:"mockServer",id:"mockserver",children:[]}]}],l={toc:i};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/classes/mock_src.mocklist"}),"MockList"))),Object(c.b)("h3",{id:"interfaces"},"Interfaces"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/interfaces/mock_src.imockoptions"}),"IMockOptions")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/interfaces/mock_src.imockserver"}),"IMockServer")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/interfaces/mock_src.imocks"}),"IMocks"))),Object(c.b)("h3",{id:"type-aliases"},"Type aliases"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/modules/mock#imockfn"}),"IMockFn")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/modules/mock#imocktypefn"}),"IMockTypeFn"))),Object(c.b)("h3",{id:"functions"},"Functions"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/modules/mock#addmockstoschema"}),"addMocksToSchema")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/modules/mock#ismocklist"}),"isMockList")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/modules/mock#mockserver"}),"mockServer"))),Object(c.b)("h2",{id:"type-aliases-1"},"Type aliases"),Object(c.b)("h3",{id:"imockfn"},"IMockFn"),Object(c.b)("p",null,"\u01ac ",Object(c.b)("strong",{parentName:"p"},"IMockFn"),": ",Object(c.b)("em",{parentName:"p"},"GraphQLFieldResolver"),"<",Object(c.b)("em",{parentName:"p"},"any"),", ",Object(c.b)("em",{parentName:"p"},"any"),"\\",">"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L6"}),"packages/mock/src/types.ts:6")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"imocktypefn"},"IMockTypeFn"),Object(c.b)("p",null,"\u01ac ",Object(c.b)("strong",{parentName:"p"},"IMockTypeFn"),": (",Object(c.b)("inlineCode",{parentName:"p"},"type"),": GraphQLType, ",Object(c.b)("inlineCode",{parentName:"p"},"typeName?"),": ",Object(c.b)("em",{parentName:"p"},"string"),", ",Object(c.b)("inlineCode",{parentName:"p"},"fieldName?"),": ",Object(c.b)("em",{parentName:"p"},"string"),") =",">"," ",Object(c.b)("em",{parentName:"p"},"GraphQLFieldResolver"),"<",Object(c.b)("em",{parentName:"p"},"any"),", ",Object(c.b)("em",{parentName:"p"},"any"),"\\",">"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"internal"))," "),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L15"}),"packages/mock/src/types.ts:15")),Object(c.b)("h2",{id:"functions-1"},"Functions"),Object(c.b)("h3",{id:"addmockstoschema"},"addMocksToSchema"),Object(c.b)("p",null,"\u25b8 ",Object(c.b)("strong",{parentName:"p"},"addMocksToSchema"),"(",Object(c.b)("inlineCode",{parentName:"p"},"__namedParameters"),": ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/api/interfaces/mock_src.imockoptions"}),Object(c.b)("em",{parentName:"a"},"IMockOptions")),"): GraphQLSchema"),Object(c.b)("p",null,"Given an instance of GraphQLSchema and a mock object, returns a new schema\nthat can return mock data for any valid query that is sent to the server."),Object(c.b)("h4",{id:"parameters"},"Parameters:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"__namedParameters")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/api/interfaces/mock_src.imockoptions"}),Object(c.b)("em",{parentName:"a"},"IMockOptions")))))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns:")," GraphQLSchema"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/mocking.ts#L82"}),"packages/mock/src/mocking.ts:82")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"ismocklist"},"isMockList"),Object(c.b)("p",null,"\u25b8 ",Object(c.b)("strong",{parentName:"p"},"isMockList"),"(",Object(c.b)("inlineCode",{parentName:"p"},"obj"),": ",Object(c.b)("em",{parentName:"p"},"any"),"): obj is MockList"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"internal"))," "),Object(c.b)("h4",{id:"parameters-1"},"Parameters:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"obj")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("em",{parentName:"td"},"any"))))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns:")," obj is MockList"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/mocking.ts#L386"}),"packages/mock/src/mocking.ts:386")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"mockserver"},"mockServer"),Object(c.b)("p",null,"\u25b8 ",Object(c.b)("strong",{parentName:"p"},"mockServer"),"(",Object(c.b)("inlineCode",{parentName:"p"},"schema"),": GraphQLSchema ","|"," ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/api/modules/utils#itypedefinitions"}),Object(c.b)("em",{parentName:"a"},"ITypeDefinitions")),", ",Object(c.b)("inlineCode",{parentName:"p"},"mocks"),": ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/api/interfaces/mock_src.imocks"}),Object(c.b)("em",{parentName:"a"},"IMocks")),", ",Object(c.b)("inlineCode",{parentName:"p"},"preserveResolvers?"),": ",Object(c.b)("em",{parentName:"p"},"boolean"),"): ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/api/interfaces/mock_src.imockserver"}),Object(c.b)("em",{parentName:"a"},"IMockServer"))),Object(c.b)("p",null,"A convenience wrapper on top of addMocksToSchema. It adds your mock resolvers\nto your schema and returns a client that will correctly execute your query with\nvariables. Note: when executing queries from the returned server, context and\nroot will both equal ",Object(c.b)("inlineCode",{parentName:"p"},"{}"),"."),Object(c.b)("h4",{id:"parameters-2"},"Parameters:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default value"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"schema")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"GraphQLSchema ","|"," ",Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/api/modules/utils#itypedefinitions"}),Object(c.b)("em",{parentName:"a"},"ITypeDefinitions"))),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The schema to which to add mocks. This can also be a set of type definitions instead.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"mocks")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/api/interfaces/mock_src.imocks"}),Object(c.b)("em",{parentName:"a"},"IMocks"))),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The mocks to add to the schema.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"preserveResolvers")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("em",{parentName:"td"},"boolean")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Set to ",Object(c.b)("inlineCode",{parentName:"td"},"true")," to prevent existing resolvers from being overwritten to provide mock data. This can be used to mock some parts of the server and not others.")))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns:")," ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/api/interfaces/mock_src.imockserver"}),Object(c.b)("em",{parentName:"a"},"IMockServer"))),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/mocking.ts#L39"}),"packages/mock/src/mocking.ts:39")))}p.isMDXComponent=!0},258:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return j}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function b(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?b(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},O=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,b=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=p(a),O=n,j=m["".concat(b,".").concat(O)]||m[O]||s[O]||c;return a?r.a.createElement(j,o(o({ref:t},l),{},{components:a})):r.a.createElement(j,o({ref:t},l))}));function j(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,b=new Array(c);b[0]=O;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:n,b[1]=o;for(var l=2;l<c;l++)b[l]=a[l];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,a)}O.displayName="MDXCreateElement"}}]);