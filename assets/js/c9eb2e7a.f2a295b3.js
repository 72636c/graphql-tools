(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{220:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return m}));var n=a(3),r=a(7),s=(a(0),a(258)),i={id:"stitch-combining-schemas",title:"Combining schemas",sidebar_label:"Combining schemas"},o={unversionedId:"stitch-combining-schemas",id:"stitch-combining-schemas",isDocsHomePage:!1,title:"Combining schemas",description:"Schema stitching (@graphql-tools/stitch) creates a single GraphQL gateway schema from multiple underlying GraphQL services. Unlike schema merging, which simply combines local schema instances, stitching builds a combined proxy layer that delegates requests through to underlying service APIs. As of GraphQL Tools v7, stitching is a comparable alternative to Apollo Federation with automated query planning, merged types, and declarative schema directives.",source:"@site/docs/stitch-combining-schemas.md",slug:"/stitch-combining-schemas",permalink:"/docs/stitch-combining-schemas",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/stitch-combining-schemas.md",version:"current",sidebar_label:"Combining schemas",sidebar:"someSidebar",previous:{title:"Schema merging",permalink:"/docs/schema-merging"},next:{title:"Type merging",permalink:"/docs/stitch-type-merging"}},c=[{value:"Why stitching?",id:"why-stitching",children:[]},{value:"Getting started",id:"getting-started",children:[]},{value:"Subschema configs",id:"subschema-configs",children:[]},{value:"Stitching remote schemas",id:"stitching-remote-schemas",children:[]},{value:"Duplicate types",id:"duplicate-types",children:[{value:"Automatic merge",id:"automatic-merge",children:[]},{value:"Manual resolution",id:"manual-resolution",children:[]}]},{value:"Adding transforms",id:"adding-transforms",children:[]},{value:"Error handling",id:"error-handling",children:[]}],l={toc:c};function m(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Schema stitching (",Object(s.b)("inlineCode",{parentName:"p"},"@graphql-tools/stitch"),") creates a single GraphQL gateway schema from multiple underlying GraphQL services. Unlike ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/merge-schemas"}),"schema merging"),", which simply combines local schema instances, stitching builds a combined proxy layer that delegates requests through to underlying service APIs. As of GraphQL Tools v7, stitching is a comparable alternative to ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.apollographql.com/docs/federation/"}),"Apollo Federation")," with automated query planning, merged types, and declarative schema directives."),Object(s.b)("h2",{id:"why-stitching"},"Why stitching?"),Object(s.b)("p",null,"One of the main benefits of GraphQL is that we can query for all data in a single request to one schema. As that schema grows though, it may become preferable to break it up into seperate modules or microservices that can be developed independently. We may also want to integrate the schemas we own with third-party schemas, allowing mashups with external data."),Object(s.b)("p",null,"In these cases, ",Object(s.b)("inlineCode",{parentName:"p"},"stitchSchemas")," is used to combine multiple GraphQL APIs into one unified gateway schema that knows how to delegate parts of a request to the relevant underlying subschemas. These subschemas may be local GraphQL instances or APIs running on remote servers."),Object(s.b)("h2",{id:"getting-started"},"Getting started"),Object(s.b)("p",null,"In this example we'll stitch together two very simple schemas representing a system of users and posts. You can find many supporting examples of stitching concepts in the ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/gmac/schema-stitching-handbook"}),"Schema Stitching Handbook"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import { makeExecutableSchema } from '@graphql-tools/schema';\nimport { stitchSchemas } from '@graphql-tools/stitch';\n\nlet postsSchema = makeExecutableSchema({\n  typeDefs: `\n    type Post {\n      id: ID!\n      text: String\n      userId: ID!\n    }\n\n    type Query {\n      postById(id: ID!): Post\n      postsByUserId(userId: ID!): [Post]!\n    }\n  `,\n  resolvers: { ... }\n});\n\nlet usersSchema = makeExecutableSchema({\n  typeDefs: `\n    type User {\n      id: ID!\n      email: String\n    }\n\n    type Query {\n      userById(id: ID!): User\n    }\n  `,\n  resolvers: { ... }\n});\n\n// setup subschema configurations\nexport const postsSubschema = { schema: postsSchema };\nexport const usersSubschema = { schema: usersSchema };\n\n// build the combined schema\nexport const gatewaySchema = stitchSchemas({\n  subschemas: [\n    postsSubschema,\n    usersSubschema,\n  ]\n});\n")),Object(s.b)("p",null,"This process builds two GraphQL schemas, places them each into subschema configuration wrappers (discussed below), and then passes the subschemas to ",Object(s.b)("inlineCode",{parentName:"p"},"stitchSchemas")," to produce one combined schema with the following root fields:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"type Query {\n  postById(id: ID!): Post\n  postsByUserId(userId: ID!): [Post]!\n  userById(id: ID!): User\n}\n")),Object(s.b)("p",null,"We now have a single gateway schema that allows data from either subschema to be requested in the same query."),Object(s.b)("h2",{id:"subschema-configs"},"Subschema configs"),Object(s.b)("p",null,'In the example above, the extra "subschema" wrapper objects may look verbose at first glance, but they are actually basic implementations of the ',Object(s.b)("inlineCode",{parentName:"p"},"SubschemaConfig")," interface that accepts several additional settings (discussed throughout this guide):"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"export interface SubschemaConfig {\n  schema: GraphQLSchema;\n  rootValue?: Record<string, any>;\n  executor?: Executor;\n  subscriber?: Subscriber;\n  createProxyingResolver?: CreateProxyingResolverFn;\n  transforms?: Array<Transform>;\n  merge?: Record<string, MergedTypeConfig>;\n  batch?: boolean;\n  batchingOptions?: {\n    extensionsReducer?: (mergedExtensions: Record<string, any>, executionParams: ExecutionParams) => Record<string, any>;\n    dataLoaderOptions?: DataLoader.Options<K, V, C>;\n  }\n}\n")),Object(s.b)("p",null,"Subschema config should ",Object(s.b)("em",{parentName:"p"},"directly")," provide as many settings as possible to avoid unnecessary layers of delegation. For example, while we ",Object(s.b)("em",{parentName:"p"},"could")," pre-wrap a subschema with transforms and a remote executor, that would be far less efficient than providing the ",Object(s.b)("inlineCode",{parentName:"p"},"schema"),", ",Object(s.b)("inlineCode",{parentName:"p"},"transforms"),", and ",Object(s.b)("inlineCode",{parentName:"p"},"executor")," options directly to subschema config."),Object(s.b)("p",null,"Also note that these subschema config objects may need to be referenced again in other stitching contexts, such as ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/stitch-schema-extensions"}),"schema extensions"),". With that in mind, you may want to export your subschema configs from their module(s)."),Object(s.b)("h2",{id:"stitching-remote-schemas"},"Stitching remote schemas"),Object(s.b)("p",null,"To include a remote schema in the combined gateway, you must provide at least the ",Object(s.b)("inlineCode",{parentName:"p"},"schema")," and ",Object(s.b)("inlineCode",{parentName:"p"},"executor")," subschema config options, and an optional ",Object(s.b)("inlineCode",{parentName:"p"},"subscriber")," for subscriptions:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import { introspectSchema } from '@graphql-tools/wrap';\nimport { fetch } from 'cross-fetch';\nimport { print } from 'graphql';\n\nasync function remoteExecutor({ document, variables }) {\n  const query = print(document);\n  const fetchResult = await fetch('https://my.remote.service/graphql', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ query, variables }),\n  });\n  return fetchResult.json();\n}\n\nexport const postsSubschema = {\n  schema: await introspectSchema(remoteExecutor),\n  executor: remoteExecutor,\n  // subscriber: remoteSubscriber\n};\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"schema"),": this is a non-executable schema representing the remote API. The remote schema may be obtained using ",Object(s.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/remote-schemas/#introspectschemaexecutor-context"}),"introspection"),", or fetched as a flat SDL string (from a server or repo) and built into a schema using ",Object(s.b)("a",Object(n.a)({parentName:"li"},{href:"https://graphql.org/graphql-js/utilities/#buildschema"}),Object(s.b)("inlineCode",{parentName:"a"},"buildSchema")),". Note that not all GraphQL servers enable introspection, and those that do will not include custom directives."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"executor"),": is a generic method that performs requests to a remote schema. It's quite simple to ",Object(s.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/remote-schemas#creating-an-executor"}),"write your own"),". Subschema config uses the executor for query and mutation operations. See ",Object(s.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/gmac/schema-stitching-handbook/tree/master/combining-local-and-remote-schemas"}),"handbook example"),"."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"subscriber"),": to enable subscription operations, include a ",Object(s.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/remote-schemas#creating-a-subscriber"}),"subscriber function")," that returns an AsyncIterator. See ",Object(s.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/gmac/schema-stitching-handbook/tree/master/mutations-and-subscriptions"}),"handbook example"),".")),Object(s.b)("h2",{id:"duplicate-types"},"Duplicate types"),Object(s.b)("p",null,"Stitching has two strategies for handling types duplicated across subschemas: an automatic merge strategy (default), and an older manual resolution strategy. You may select between these strategies using the ",Object(s.b)("inlineCode",{parentName:"p"},"mergeTypes")," option."),Object(s.b)("h3",{id:"automatic-merge"},"Automatic merge"),Object(s.b)("p",null,"Types with the same name are automatically merged by default in GraphQL Tools v7. That means objects, interfaces, and input objects with the same name will consolidate their fields across subschemas, and unions/enums will consolidate all their members. The combined gateway schema will then smartly delegate portions of a request to the proper origin subschema(s). See ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/stitch-type-merging/"}),"type merging guide")," for a comprehensive overview."),Object(s.b)("p",null,"Automatic merging will only encounter conflicts on type descriptions and fields. By default, the final definition of a type or field found in the subschemas array is used, or a specific definition may be ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/stitch-type-merging#canonical-definitions"}),"marked as canonical"),". You may customize all selection logic using ",Object(s.b)("inlineCode",{parentName:"p"},"typeMergingOptions"),"; the following prefers the ",Object(s.b)("em",{parentName:"p"},"first")," definition of each conflicting element found in the subschemas array:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const gatewaySchema = stitchSchemas({\n  subschemas: [...],\n  mergeTypes: true, // << default in v7\n  typeMergingOptions: {\n    // select a preferred type candidate that provides definitions:\n    typeCandidateMerger: (candidates) => candidate[0],\n    // and/or itemize the selection of other specific definitions:\n    typeDescriptionsMerger: (candidates) => candidate[0].type.description,\n    fieldConfigMerger: (candidates) => candidate[0].fieldConfig,\n    inputFieldConfigMerger: (candidates) => candidate[0].inputFieldConfig,\n    enumValueConfigMerger: (candidates) => candidate[0].enumValueConfig,\n  },\n});\n")),Object(s.b)("h3",{id:"manual-resolution"},"Manual resolution"),Object(s.b)("p",null,"By setting ",Object(s.b)("inlineCode",{parentName:"p"},"mergeTypes: false"),", only the final description and fields for a type found in the subschemas array will be used. You may manually resolve differences between conflicting types with an ",Object(s.b)("inlineCode",{parentName:"p"},"onTypeConflict")," handler:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const gatewaySchema = stitchSchemas({\n  subschemas: [...],\n  mergeTypes: false,\n  onTypeConflict: (left, right, info) => {\n    return info.left.schema.version >= info.right.schema.version ? left : right;\n  }\n});\n")),Object(s.b)("h2",{id:"adding-transforms"},"Adding transforms"),Object(s.b)("p",null,"Another strategy to avoid conflicts while combining schemas is to modify one or more of the subschemas using ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/schema-wrapping#transform"}),"transforms"),". Transforming allows a schema to be groomed in such ways as adding namespaces, renaming types, or removing fields (to name a few) prior to stitching it into the combined gateway schema. These transforms should be added directly to subschema config:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import { FilterRootFields, RenameTypes } from '@graphql-tools/wrap';\n\nconst postsSubschema = {\n  schema: postsSchema,\n  transforms: [\n    new FilterRootFields((operation, rootField) => rootField !== 'postsByUserId'),\n    new RenameTypes((name) => `Post_${name}`),\n  ],\n};\n")),Object(s.b)("p",null,"In the example above, we transform the ",Object(s.b)("inlineCode",{parentName:"p"},"postsSchema")," by removing the ",Object(s.b)("inlineCode",{parentName:"p"},"postsByUserId")," root field and adding a ",Object(s.b)("inlineCode",{parentName:"p"},"Post_")," prefix to all types in the schema. These modifications will only be present in the combined gateway schema."),Object(s.b)("p",null,"Note that when ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#automatic-merge"}),"automatically merging types"),", all transforms are applied ",Object(s.b)("em",{parentName:"p"},"prior")," to merging. That means transformed types will merge based on their transformed names within the combined gateway schema."),Object(s.b)("h2",{id:"error-handling"},"Error handling"),Object(s.b)("p",null,"Whether you're ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/stitch-type-merging"}),"merging types"),", using ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/stitch-schema-extensions"}),"schema extensions"),", or simply combining schemas, any errors returned by a subschema will flow through the stitching process and report at their mapped output positions. It's fairly seamless to provide quality errors from a stitched schema by following some basic guidelines:"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"Report errors!")," Having a subschema return ",Object(s.b)("inlineCode",{parentName:"p"},"null")," without an error for missing or failed records is a poor development experience to begin with. This omission will compound should an unexpected value produce a misleading failure in gateway stitching. Reporting ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"https://spec.graphql.org/June2018/#sec-Errors"}),"proper GraphQL errors")," will contexualize failures in subschemas, and by extension, within the stitched schema.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"Map errors to array positions"),". When returning arrays of records (a common pattern while ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/stitch-type-merging#batching"}),"batch loading"),"), make sure to return errors for specific array positions rather than erroring out the entire array. For example, an array should be resolved as:"))),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"posts() {\n  return [\n    { id: '1', ... },\n    new NotFoundError(),\n    { id: '3', ... },\n  ];\n}\n")),Object(s.b)("ol",{start:3},Object(s.b)("li",{parentName:"ol"},Object(s.b)("strong",{parentName:"li"},"Assure valid error paths"),". The ",Object(s.b)("a",Object(n.a)({parentName:"li"},{href:"https://spec.graphql.org/June2018/#sec-Errors"}),"GraphQL errors spec")," prescribes a ",Object(s.b)("inlineCode",{parentName:"li"},"path")," attribute mapping an error to its corresponding document position. Stitching uses these paths to remap subschema errors into the combined result. While GraphQL libraries should automatically configure this ",Object(s.b)("inlineCode",{parentName:"li"},"path")," for you, the accuracy ",Object(s.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/rmosolgo/graphql-ruby/issues/3193"}),"may vary by programming language"),".")))}m.isMDXComponent=!0},258:function(e,t,a){"use strict";a.d(t,"a",(function(){return h})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),m=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},h=function(e){var t=m(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),h=m(a),b=n,u=h["".concat(i,".").concat(b)]||h[b]||p[b]||s;return a?r.a.createElement(u,o(o({ref:t},l),{},{components:a})):r.a.createElement(u,o({ref:t},l))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var l=2;l<s;l++)i[l]=a[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);