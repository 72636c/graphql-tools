(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{231:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return s})),r.d(t,"metadata",(function(){return i})),r.d(t,"toc",(function(){return b})),r.d(t,"default",(function(){return o}));var a=r(3),n=r(7),c=(r(0),r(258)),s={},i={unversionedId:"api/interfaces/merge_src.mergeschemasconfig",id:"api/interfaces/merge_src.mergeschemasconfig",isDocsHomePage:!1,title:"merge_src.mergeschemasconfig",description:"Interface: MergeSchemasConfig&lt;Resolvers\\&gt;",source:"@site/docs/api/interfaces/merge_src.mergeschemasconfig.md",slug:"/api/interfaces/merge_src.mergeschemasconfig",permalink:"/docs/api/interfaces/merge_src.mergeschemasconfig",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/api/interfaces/merge_src.mergeschemasconfig.md",version:"current",sidebar:"someSidebar",previous:{title:"merge_src.mergeresolversoptions",permalink:"/docs/api/interfaces/merge_src.mergeresolversoptions"},next:{title:"utils_src.observable",permalink:"/docs/api/interfaces/utils_src.observable"}},b=[{value:"Type parameters",id:"type-parameters",children:[]},{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Table of contents",id:"table-of-contents",children:[{value:"Properties",id:"properties",children:[]}]},{value:"Properties",id:"properties-1",children:[{value:"assumeValid",id:"assumevalid",children:[]},{value:"assumeValidSDL",id:"assumevalidsdl",children:[]},{value:"commentDescriptions",id:"commentdescriptions",children:[]},{value:"consistentEnumMerge",id:"consistentenummerge",children:[]},{value:"convertExtensions",id:"convertextensions",children:[]},{value:"exclusions",id:"exclusions",children:[]},{value:"forceSchemaDefinition",id:"forceschemadefinition",children:[]},{value:"logger",id:"logger",children:[]},{value:"resolverValidationOptions",id:"resolvervalidationoptions",children:[]},{value:"resolvers",id:"resolvers",children:[]},{value:"reverseDirectives",id:"reversedirectives",children:[]},{value:"schemaDirectives",id:"schemadirectives",children:[]},{value:"schemas",id:"schemas",children:[]},{value:"sort",id:"sort",children:[]},{value:"throwOnConflict",id:"throwonconflict",children:[]},{value:"typeDefs",id:"typedefs",children:[]},{value:"useSchemaDefinition",id:"useschemadefinition",children:[]}]}],p={toc:b};function o(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"interface-mergeschemasconfigresolvers"},"Interface: MergeSchemasConfig","<","Resolvers\\",">"),Object(c.b)("p",null,Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"../modules/merge_src"}),"merge/src"),".MergeSchemasConfig"),Object(c.b)("p",null,"Configuration object for schema merging"),Object(c.b)("h2",{id:"type-parameters"},"Type parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Default"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"Resolvers")),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(a.a)({parentName:"td"},{href:"/docs/api/modules/utils#iresolvers"}),Object(c.b)("em",{parentName:"a"},"IResolvers"))),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(a.a)({parentName:"td"},{href:"../modules/utils_src.md#iresolvers"}),Object(c.b)("em",{parentName:"a"},"IResolvers")))))),Object(c.b)("h2",{id:"hierarchy"},"Hierarchy"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"merge_src.config"}),Object(c.b)("em",{parentName:"a"},"Config")))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("em",{parentName:"p"},"BuildSchemaOptions")),Object(c.b)("p",{parentName:"li"},"\u21b3 ",Object(c.b)("strong",{parentName:"p"},"MergeSchemasConfig")))),Object(c.b)("h2",{id:"table-of-contents"},"Table of contents"),Object(c.b)("h3",{id:"properties"},"Properties"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#assumevalid"}),"assumeValid")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#assumevalidsdl"}),"assumeValidSDL")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#commentdescriptions"}),"commentDescriptions")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#consistentenummerge"}),"consistentEnumMerge")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#convertextensions"}),"convertExtensions")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#exclusions"}),"exclusions")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#forceschemadefinition"}),"forceSchemaDefinition")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#logger"}),"logger")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#resolvervalidationoptions"}),"resolverValidationOptions")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#resolvers"}),"resolvers")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#reversedirectives"}),"reverseDirectives")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#schemadirectives"}),"schemaDirectives")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#schemas"}),"schemas")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#sort"}),"sort")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#throwonconflict"}),"throwOnConflict")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#typedefs"}),"typeDefs")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/api/interfaces/merge_src.mergeschemasconfig#useschemadefinition"}),"useSchemaDefinition"))),Object(c.b)("h2",{id:"properties-1"},"Properties"),Object(c.b)("h3",{id:"assumevalid"},"assumeValid"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"assumeValid"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"When building a schema from a GraphQL service's introspection result, it\nmight be safe to assume the schema is valid. Set to true to assume the\nproduced schema is valid."),Object(c.b)("p",null,"Default: false"),Object(c.b)("p",null,"Defined in: node_modules/graphql/type/schema.d.ts:122"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"assumevalidsdl"},"assumeValidSDL"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"assumeValidSDL"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"Set to true to assume the SDL is valid."),Object(c.b)("p",null,"Default: false"),Object(c.b)("p",null,"Defined in: node_modules/graphql/utilities/buildASTSchema.d.ts:22"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"commentdescriptions"},"commentDescriptions"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"commentDescriptions"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"Descriptions are defined as preceding string literals, however an older\nexperimental version of the SDL supported preceding comments as\ndescriptions. Set to true to enable this deprecated behavior.\nThis option is provided to ease adoption and will be removed in v16."),Object(c.b)("p",null,"Default: false"),Object(c.b)("p",null,"Inherited from: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"merge_src.config"}),"Config"),".",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/interfaces/merge_src.config#commentdescriptions"}),"commentDescriptions")),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L38"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:38")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"consistentenummerge"},"consistentEnumMerge"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"consistentEnumMerge"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"Inherited from: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"merge_src.config"}),"Config"),".",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/interfaces/merge_src.config#consistentenummerge"}),"consistentEnumMerge")),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L60"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:60")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"convertextensions"},"convertExtensions"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"convertExtensions"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"Inherited from: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"merge_src.config"}),"Config"),".",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/interfaces/merge_src.config#convertextensions"}),"convertExtensions")),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L59"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:59")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"exclusions"},"exclusions"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"exclusions"),": ",Object(c.b)("em",{parentName:"p"},"string"),"[]"),Object(c.b)("p",null,"Inherited from: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"merge_src.config"}),"Config"),".",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/interfaces/merge_src.config#exclusions"}),"exclusions")),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L57"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:57")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"forceschemadefinition"},"forceSchemaDefinition"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"forceSchemaDefinition"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"Creates schema definition, even when no types are available\nProduces: ",Object(c.b)("inlineCode",{parentName:"p"},"schema { query: Query }")),Object(c.b)("p",null,"Default: false"),Object(c.b)("p",null,"Inherited from: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"merge_src.config"}),"Config"),".",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/interfaces/merge_src.config#forceschemadefinition"}),"forceSchemaDefinition")),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L23"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:23")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"logger"},"logger"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"logger"),": ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"schema_src.ilogger"}),Object(c.b)("em",{parentName:"a"},"ILogger"))),Object(c.b)("p",null,"Custom logger instance"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/merge-schemas.ts#L41"}),"packages/merge/src/merge-schemas.ts:41")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"resolvervalidationoptions"},"resolverValidationOptions"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"resolverValidationOptions"),": ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"utils_src.iresolvervalidationoptions"}),Object(c.b)("em",{parentName:"a"},"IResolverValidationOptions"))),Object(c.b)("p",null,"Options to validate the resolvers being merged, if provided"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/merge-schemas.ts#L37"}),"packages/merge/src/merge-schemas.ts:37")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"resolvers"},"resolvers"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"resolvers"),": Resolvers ","|"," Resolvers[]"),Object(c.b)("p",null,"Additional resolvers to also merge"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/merge-schemas.ts#L29"}),"packages/merge/src/merge-schemas.ts:29")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"reversedirectives"},"reverseDirectives"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"reverseDirectives"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"Puts the next directive first."),Object(c.b)("p",null,"Default: false"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"example:")),"\nGiven:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"})," type User { a: String @foo }\n type User { a: String @bar }\n")),Object(c.b)("p",null,"Results:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{})," type User { a: @bar @foo }\n")),Object(c.b)("p",null,"Inherited from: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"merge_src.config"}),"Config"),".",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/interfaces/merge_src.config#reversedirectives"}),"reverseDirectives")),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L56"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:56")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"schemadirectives"},"schemaDirectives"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"schemaDirectives"),": { ","[directiveName: string]",": ",Object(c.b)("em",{parentName:"p"},"typeof")," ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/classes/utils_src.schemadirectivevisitor"}),Object(c.b)("em",{parentName:"a"},"SchemaDirectiveVisitor")),";  }"),Object(c.b)("p",null,"Schema directives to apply to the type definitions being merged, if provided"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/merge-schemas.ts#L33"}),"packages/merge/src/merge-schemas.ts:33")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"schemas"},"schemas"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("strong",{parentName:"p"},"schemas"),": ",Object(c.b)("em",{parentName:"p"},"GraphQLSchema"),"[]"),Object(c.b)("p",null,"The schemas to be merged"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/merge-schemas.ts#L21"}),"packages/merge/src/merge-schemas.ts:21")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"sort"},"sort"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"sort"),": ",Object(c.b)("em",{parentName:"p"},"boolean")," ","|"," ",Object(c.b)("em",{parentName:"p"},"CompareFn"),"<",Object(c.b)("em",{parentName:"p"},"string"),"\\",">"),Object(c.b)("p",null,"Inherited from: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"merge_src.config"}),"Config"),".",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/interfaces/merge_src.config#sort"}),"sort")),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L58"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:58")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"throwonconflict"},"throwOnConflict"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"throwOnConflict"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"Throws an error on a merge conflict"),Object(c.b)("p",null,"Default: false"),Object(c.b)("p",null,"Inherited from: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"merge_src.config"}),"Config"),".",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/interfaces/merge_src.config#throwonconflict"}),"throwOnConflict")),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L29"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:29")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"typedefs"},"typeDefs"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"typeDefs"),": ",Object(c.b)("em",{parentName:"p"},"string")," ","|"," DocumentNode ","|"," (",Object(c.b)("em",{parentName:"p"},"string")," ","|"," DocumentNode)[]"),Object(c.b)("p",null,"Additional type definitions to also merge"),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/merge-schemas.ts#L25"}),"packages/merge/src/merge-schemas.ts:25")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"useschemadefinition"},"useSchemaDefinition"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Optional")," ",Object(c.b)("strong",{parentName:"p"},"useSchemaDefinition"),": ",Object(c.b)("em",{parentName:"p"},"boolean")),Object(c.b)("p",null,"Produces ",Object(c.b)("inlineCode",{parentName:"p"},"schema { query: ..., mutation: ..., subscription: ... }")),Object(c.b)("p",null,"Default: true"),Object(c.b)("p",null,"Inherited from: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"merge_src.config"}),"Config"),".",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/interfaces/merge_src.config#useschemadefinition"}),"useSchemaDefinition")),Object(c.b)("p",null,"Defined in: ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-tools/blob/master/packages/merge/src/typedefs-mergers/merge-typedefs.ts#L16"}),"packages/merge/src/typedefs-mergers/merge-typedefs.ts:16")))}o.isMDXComponent=!0},258:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return g}));var a=r(0),n=r.n(a);function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function b(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},c=Object.keys(e);for(a=0;a<c.length;a++)r=c[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)r=c[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=n.a.createContext({}),o=function(e){var t=n.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=o(e.components);return n.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},O=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,p=b(e,["components","mdxType","originalType","parentName"]),l=o(r),O=a,g=l["".concat(s,".").concat(O)]||l[O]||m[O]||c;return r?n.a.createElement(g,i(i({ref:t},p),{},{components:r})):n.a.createElement(g,i({ref:t},p))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=r.length,s=new Array(c);s[0]=O;var i={};for(var b in t)hasOwnProperty.call(t,b)&&(i[b]=t[b]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<c;p++)s[p]=r[p];return n.a.createElement.apply(null,s)}return n.a.createElement.apply(null,r)}O.displayName="MDXCreateElement"}}]);