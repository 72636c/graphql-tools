(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{198:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return u}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,u=m["".concat(s,".").concat(d)]||m[d]||b[d]||i;return n?a.a.createElement(u,c(c({ref:t},l),{},{components:n})):a.a.createElement(u,c({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var l=2;l<i;l++)s[l]=n[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(6),i=(n(0),n(198)),s={id:"stitch-api",title:"Stitching API",description:"Stitching API"},c={unversionedId:"stitch-api",id:"stitch-api",isDocsHomePage:!1,title:"Stitching API",description:"Stitching API",source:"@site/docs/stitch-api.md",slug:"/stitch-api",permalink:"/docs/stitch-api",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/stitch-api.md",version:"current",sidebar:"someSidebar",previous:{title:"Extending stitched schemas",permalink:"/docs/stitch-schema-extensions"},next:{title:"Setup an HTTP server",permalink:"/docs/server-setup"}},o=[{value:"stitchSchemas",id:"stitchschemas",children:[]},{value:"createMergedTypeResolver",id:"createmergedtyperesolver",children:[]},{value:"forwardArgsToSelectionSet",id:"forwardargstoselectionset",children:[]}],l={rightToc:o};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"stitchschemas"},"stitchSchemas"),Object(i.b)("p",null,"This is the main function that implements schema stitching. It accepts all the same arguments as ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/generate-schema/"}),Object(i.b)("inlineCode",{parentName:"a"},"makeExecutableSchema")),", and the additions below."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"stitchSchemas({\n  subschemas?: Array<GraphQLSchema | SubschemaConfig | Array<SubschemaConfig>>;\n  types?: Array<GraphQLNamedType>;\n  typeDefs?: ITypeDefinitions;\n  resolvers?: IResolvers<any, TContext> | Array<IResolvers<any, TContext>>;\n  mergeDirectives?: boolean;\n  mergeTypes?: boolean | Array<string> | MergeTypeFilter;\n  typeMergingOptions?: TypeMergingOptions;\n  onTypeConflict?: OnTypeConflict;\n  subschemaConfigTransforms?: Array<SubschemaConfigTransform>;\n}): GraphQLSchema\n\nexport interface TypeMergingOptions {\n  typeDescriptionsMerger?: (candidates: Array<MergeTypeCandidate>) => string;\n  fieldConfigMerger?: (candidates: Array<MergeFieldConfigCandidate>) => GraphQLFieldConfig<any, any>;\n  inputFieldConfigMerger?: (candidates: Array<MergeInputFieldConfigCandidate>) => GraphQLInputFieldConfig;\n}\n\nexport type OnTypeConflict = (\n  left: GraphQLNamedType,\n  right: GraphQLNamedType,\n  info?: {\n    left: {\n      subschema?: GraphQLSchema | SubschemaConfig;\n      transformedSubschema?: Subschema;\n    };\n    right: {\n      subschema?: GraphQLSchema | SubschemaConfig;\n      transformedSubschema?: Subschema;\n    };\n  }\n) => GraphQLNamedType;\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"subschemas"),": an array of schema-like objects. These subschemas are wrapped with proxying resolvers in the final schema."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"types"),": additional types to add to the final type map, most useful for custom scalars or enums."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"typeDefs"),": strings or parsed documents that contain additional types or type extensions. Type extensions are always applied last."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"resolvers"),": accepts ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/resolvers/"}),"standard resolvers")," with the addition of specifying a ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/stitch-schema-extensions#selectionset"}),Object(i.b)("inlineCode",{parentName:"a"},"selectionSet")),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mergeTypes"),": specifies a strategy for ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/stitch-combining-schemas#duplicate-types"}),"handling duplicated types"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"typeMergingOptions"),": allows customization of ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/stitch-combining-schemas#automatic-merge"}),"automatic type merging"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onTypeConflict"),": allows customization of ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/stitch-combining-schemas#manual-resolution"}),"manual type resolution"),".")),Object(i.b)("h3",{id:"createmergedtyperesolver"},"createMergedTypeResolver"),Object(i.b)("p",null,"Creates a merged type resolver that may be ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/stitch-type-merging#wrapped-resolvers"}),"wrapped with custom behaviors"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"createMergedTypeResolver({\n  fieldName?: string;\n  args?: (originalResult: any) => Record<string, any>;\n  argsFromKeys?: (keys: ReadonlyArray<K>) => Record<string, any>;\n  valuesFromResults?: (results: any, keys: ReadonlyArray<K>) => Array<V>;\n}): MergedTypeResolver\n")),Object(i.b)("h3",{id:"forwardargstoselectionset"},"forwardArgsToSelectionSet"),Object(i.b)("p",null,"Creates a dynamic ",Object(i.b)("inlineCode",{parentName:"p"},"selectionSet")," that ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/stitch-schema-extensions#via-selectionset"}),"forwards gateway arguments")," to a resolver selection hint."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"forwardArgsToSelectionSet(\n  selectionSet: string,\n  mapping?: Record<string, string[]>\n) => (field: FieldNode) => SelectionSetNode\n")))}p.isMDXComponent=!0}}]);